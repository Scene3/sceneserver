/---------------------
 -- sceneserver.bento
 --
 -- A simple customizable 3D content server.
 --
 -- Copyright (c) 2013-2014 by Michael St. Hippolyte
 --
 --/
 
site sceneserver [=

    adopt three

    world_file_path = file_base + this_config.world_path 
    world_name = this_config.world_name
    
    init [=
        load_config;
        log("world: " + world_name + "  world path: " + world_file_path);
        load_world(world_name, world_file_path);
    =]


    page(params) sceneserver_basepage(params{}),(path, params{}) [=
        viewport [| width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0 |]

        style [| 
            html, body { 
                width: 100%;
                height: 100%;
                min-width: 100%;
                min-height: 100%;
                margin: 0;
                background: black;
            }
        |]

        sub;
    =]

    /** request base class **/
    req(nm) [=
        name = nm
        dynamic get [?]
    =]
    
    /-- request types --/
    
    req(*) scene_req(nm) [=
        dynamic get = get_scene(name)
    =]
    
    req(*) agent_req(nm) [=
        dynamic get = get_agent(name)
    =]
    
    req(*) prop_req(nm) [=
        dynamic get = get_prop(name)
    =]

    req(*) page_req(nm) [=
        dynamic get = get_page(name)
    =]
        
    req("[INFO]") info_req(info) [=
        get = info
    =]    

    /-- request constructor table --/

    req req_constructor{} = { "scene": scene_req, "agent": agent_req, "prop": prop_req,
                              "page" : page_req
                            } 

    
    response general_response(path, params{}) [=
        title = "sceneserver"

        dynamic req req_for_path [=
            int ix = index_of(path, "/")
            req_type = (ix < 0 ? path : substring(path, 0, ix))
            req_name = (ix > 0 && ix + 1 < strlen(path) ? substring(path, ix + 1) : "")

            req rc = req_constructor{req_type} 
            
            if (rc && req_name) [=
                rc(req_name);
            =] else if (req_type) [=
                info_req("don't know how to handle " + req_type);
            =]
        =]

        req r = req_for_path
        
        "<h2>";
        r.get;
        "</h2>";
    =]

    component system_message(msg) [=
        [| <b> |]
        msg;
        [| </b> |]
    =]   


    /---- object retrieval functons ----/ 

    dynamic get_scene(name) [=
        ("~~== scene " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_agent(name) [=
        ("~~== agent " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_prop(name) [=
        ("~~== prop " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_page(name) [=
        ("~~== page " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]




    /---- pseudofiles ----/

    js [=
        lib [=
            three [=
                js [=
                    include_file("../3p/lib/three.js");
                =]
            =]
            stats [=
                js [=
                    include_file("../3p/lib/stats.min.js");
                =]
            =]
        =]
    =]

=]
 