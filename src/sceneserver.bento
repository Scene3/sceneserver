/---------------------
 -- sceneserver.bento
 --
 -- A simple customizable 3D content server.
 --
 -- Copyright (c) 2013-2014 by Michael St. Hippolyte
 --
 --/
 
site sceneserver [=

    adopt three

    int major_version = 0
    int minor_version = 1

    version = major_version + "." + minor_version

    world_file_path = file_base + this_config.world_path 
    world_name = this_config.world_name
    
    init [=
        load_config;
        log("world: " + world_name + "  world path: " + world_file_path);
        load_world(world_name, world_file_path);
    =]


    page(params) sceneserver_basepage(params{}),(path, params{}) [=
        viewport [| width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0 |]

        style [| 
            html, body { 
                width: 100%;
                height: 100%;
                min-width: 100%;
                min-height: 100%;
                margin: 0;
                background: black;
            }
        |]

        sub;
    =]

    /** sceneserver request base class **/
    req [=
       name [?]
    =]
    
    /-- request types --/
    
    req scene_req [=
        name = "scene"
    =]

    req agent_req [=
        name = "agent";
    =]
    
    req prop_req [=
        name = "prop";
    =]

    req page_req [=
        name = "page";
    =]
        
    req info_req [=
        name = "info";
        info = "Sceneserver " + version + "<br>Open server for multiuser, interconnected 3D content."
    =]    

    /-- request constructor table --/
    req[] supported_reqs = [ scene_req, agent_req, prop_req, info_req, page_req ] 
    req{} req_types = { for req r in supported_reqs [=
                            r.name: r
                        =]
                      }

    response index(request r) [=
        general_response("scene/home", r);
    =]
   
    
    response general_response(r_name, request r) [=
        title = "sceneserver"

        path = r.path_info
        npath = (starts_with(path, "/") ? substring(path, 1) : path)
            
        int ix = last_index_of(npath, "/")
        rname = (ix < 0 ? npath : substring(npath, ix + 1))
        rtype = (ix > 0 ? substring(npath, 0, ix) : "")

        req rq = req_types{rtype}

        handle_request(rq, rname);
    =]
    
    
    dynamic handle_request(scene_req scene_rq, nm),
                          (agent_req agent_rq, nm),
                          (prop_req prop_rq, nm),
                          (page_req page_rq, nm),
                          (info_req info_rq, nm),
                          (req unhandled_rq, nm) [=

        with (scene_rq) [=
            get_scene(nm);

        =] else with (agent_rq) [=
            get_agent(nm);

        =] else with (prop_rq) [=
            get_prop(nm);

        =] else with (page_rq) [=
            get_page(nm);

        =] else [=
            [| <h2> |]
            with (info_rq) [=
                info_rq.info;
            =] else if (unhandled_rq.name) [=
                "Don't know how to handle request for ";
                unhandled_rq.name;
            =] else [=
                "Empty or unrecognized request";
            =]
            [| </h2> |]
        =]             
    =]


    /---- object retrieval functons ----/ 

    dynamic get_scene(name) [=
        ("~~== scene " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_agent(name) [=
        ("~~== agent " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_prop(name) [=
        ("~~== prop " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]

    dynamic get_page(name) [=
        ("~~== page " + (name ? name : "bbhphhhtt") + " ==~~");    
    =]




    /---- pseudofiles ----/

    js [=
        lib [=
            three [=
                js [=
                    include_file("../3p/lib/three.js");
                =]
            =]
            stats [=
                js [=
                    include_file("../3p/lib/stats.min.js");
                =]
            =]
        =]
    =]

=]
 